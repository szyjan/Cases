// <auto-generated />
using System;
using Cases.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Cases.Persistance.Migrations
{
    [DbContext(typeof(CasesDbContext))]
    [Migration("20220528130025_sjan_initial")]
    partial class sjan_initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Cases.Domain.Entities.Cases.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<int?>("CommentId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CommentId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("Attachment");
                });

            modelBuilder.Entity("Cases.Domain.Entities.Cases.Case", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("Case");
                });

            modelBuilder.Entity("Cases.Domain.Entities.Cases.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDateUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("Cases.Domain.Entities.Cases.Deadline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeadlineDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDateUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("Deadline");
                });

            modelBuilder.Entity("Cases.Domain.Entities.ClientData.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("Cases.Domain.Entities.ClientData.CompanyIdentifier", b =>
                {
                    b.Property<string>("Identifier")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdentifierType")
                        .HasColumnType("int");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDateUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Identifier");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("CompanyIdentifier");
                });

            modelBuilder.Entity("Cases.Domain.Entities.ClientData.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("Cases.Domain.Entities.Employees.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCourtAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SupervisorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("SupervisorId");

                    b.ToTable("Employee");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = 1,
                            CreatedDateUtc = new DateTime(2022, 5, 28, 13, 0, 25, 503, DateTimeKind.Utc).AddTicks(6314),
                            EmailAddress = "szymon.jankowski@hotmail.com",
                            FirstName = "Szymon",
                            IsCourtAvailable = false,
                            LastName = "Jankowski",
                            ModifiedBy = 1,
                            ModifiedDateUtc = new DateTime(2022, 5, 28, 13, 0, 25, 503, DateTimeKind.Utc).AddTicks(6315),
                            PhoneNumber = ""
                        });
                });

            modelBuilder.Entity("Cases.Domain.Entities.Relations.CaseCompany", b =>
                {
                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPart")
                        .HasColumnType("bit");

                    b.HasKey("CaseId", "CompanyId");

                    b.HasIndex("CompanyId");

                    b.ToTable("CaseCompany");
                });

            modelBuilder.Entity("Cases.Domain.Entities.Relations.CaseCustomer", b =>
                {
                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMainCustomer")
                        .HasColumnType("bit");

                    b.HasKey("CaseId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CaseCustomer");
                });

            modelBuilder.Entity("Cases.Domain.Entities.Relations.CaseEmployee", b =>
                {
                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsOwner")
                        .HasColumnType("bit");

                    b.HasKey("CaseId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("CaseEmployee");
                });

            modelBuilder.Entity("Cases.Domain.Entities.Relations.CompanyCustomer", b =>
                {
                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMainRepresentative")
                        .HasColumnType("bit");

                    b.HasKey("CompanyId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CompanyCustomer");
                });

            modelBuilder.Entity("Cases.Domain.Entities.Cases.Attachment", b =>
                {
                    b.HasOne("Cases.Domain.Entities.Cases.Case", null)
                        .WithMany("Attachemnts")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cases.Domain.Entities.Cases.Comment", null)
                        .WithMany("Attachemnts")
                        .HasForeignKey("CommentId");

                    b.HasOne("Cases.Domain.Entities.Employees.Employee", "CreatedByEmployee")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cases.Domain.Entities.Employees.Employee", "ModifiedByEmployee")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByEmployee");

                    b.Navigation("ModifiedByEmployee");
                });

            modelBuilder.Entity("Cases.Domain.Entities.Cases.Case", b =>
                {
                    b.HasOne("Cases.Domain.Entities.Employees.Employee", "CreatedByEmployee")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cases.Domain.Entities.Employees.Employee", null)
                        .WithMany("Cases")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Cases.Domain.Entities.Employees.Employee", "ModifiedByEmployee")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByEmployee");

                    b.Navigation("ModifiedByEmployee");
                });

            modelBuilder.Entity("Cases.Domain.Entities.Cases.Comment", b =>
                {
                    b.HasOne("Cases.Domain.Entities.Employees.Employee", "CreatedByEmployee")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cases.Domain.Entities.Employees.Employee", "ModifiedByEmployee")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByEmployee");

                    b.Navigation("ModifiedByEmployee");
                });

            modelBuilder.Entity("Cases.Domain.Entities.Cases.Deadline", b =>
                {
                    b.HasOne("Cases.Domain.Entities.Cases.Case", null)
                        .WithMany("Deadlines")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cases.Domain.Entities.Employees.Employee", "CreatedByEmployee")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cases.Domain.Entities.Employees.Employee", "ModifiedByEmployee")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByEmployee");

                    b.Navigation("ModifiedByEmployee");
                });

            modelBuilder.Entity("Cases.Domain.Entities.ClientData.Company", b =>
                {
                    b.HasOne("Cases.Domain.Entities.Employees.Employee", "CreatedByEmployee")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cases.Domain.Entities.Employees.Employee", "ModifiedByEmployee")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByEmployee");

                    b.Navigation("ModifiedByEmployee");
                });

            modelBuilder.Entity("Cases.Domain.Entities.ClientData.CompanyIdentifier", b =>
                {
                    b.HasOne("Cases.Domain.Entities.ClientData.Company", null)
                        .WithMany("CompanyIdentifiers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cases.Domain.Entities.Employees.Employee", "CreatedByEmployee")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cases.Domain.Entities.Employees.Employee", "ModifiedByEmployee")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByEmployee");

                    b.Navigation("ModifiedByEmployee");
                });

            modelBuilder.Entity("Cases.Domain.Entities.ClientData.Customer", b =>
                {
                    b.HasOne("Cases.Domain.Entities.Employees.Employee", "CreatedByEmployee")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cases.Domain.Entities.Employees.Employee", "ModifiedByEmployee")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByEmployee");

                    b.Navigation("ModifiedByEmployee");
                });

            modelBuilder.Entity("Cases.Domain.Entities.Employees.Employee", b =>
                {
                    b.HasOne("Cases.Domain.Entities.Employees.Employee", "CreatedByEmployee")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cases.Domain.Entities.Employees.Employee", "ModifiedByEmployee")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cases.Domain.Entities.Employees.Employee", "Supervisor")
                        .WithMany()
                        .HasForeignKey("SupervisorId");

                    b.Navigation("CreatedByEmployee");

                    b.Navigation("ModifiedByEmployee");

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("Cases.Domain.Entities.Relations.CaseCompany", b =>
                {
                    b.HasOne("Cases.Domain.Entities.Cases.Case", "Case")
                        .WithMany("Companies")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cases.Domain.Entities.ClientData.Company", "Company")
                        .WithMany("Cases")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Cases.Domain.Entities.Relations.CaseCustomer", b =>
                {
                    b.HasOne("Cases.Domain.Entities.Cases.Case", "Case")
                        .WithMany("Customers")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cases.Domain.Entities.ClientData.Customer", "Customer")
                        .WithMany("Cases")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Cases.Domain.Entities.Relations.CaseEmployee", b =>
                {
                    b.HasOne("Cases.Domain.Entities.Cases.Case", "Case")
                        .WithMany("CaseWorkers")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cases.Domain.Entities.Employees.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Cases.Domain.Entities.Relations.CompanyCustomer", b =>
                {
                    b.HasOne("Cases.Domain.Entities.ClientData.Company", "Company")
                        .WithMany("Representatives")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cases.Domain.Entities.ClientData.Customer", "Customer")
                        .WithMany("Companies")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Cases.Domain.Entities.Cases.Case", b =>
                {
                    b.Navigation("Attachemnts");

                    b.Navigation("CaseWorkers");

                    b.Navigation("Companies");

                    b.Navigation("Customers");

                    b.Navigation("Deadlines");
                });

            modelBuilder.Entity("Cases.Domain.Entities.Cases.Comment", b =>
                {
                    b.Navigation("Attachemnts");
                });

            modelBuilder.Entity("Cases.Domain.Entities.ClientData.Company", b =>
                {
                    b.Navigation("Cases");

                    b.Navigation("CompanyIdentifiers");

                    b.Navigation("Representatives");
                });

            modelBuilder.Entity("Cases.Domain.Entities.ClientData.Customer", b =>
                {
                    b.Navigation("Cases");

                    b.Navigation("Companies");
                });

            modelBuilder.Entity("Cases.Domain.Entities.Employees.Employee", b =>
                {
                    b.Navigation("Cases");
                });
#pragma warning restore 612, 618
        }
    }
}
